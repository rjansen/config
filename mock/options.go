// Code generated by mockery v1.0.0. DO NOT EDIT.

package mock

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Options is an autogenerated mock type for the Options type
type Options struct {
	mock.Mock
}

func NewOptions() *Options {
	return new(Options)
}

// Bool provides a mock function with given fields: name, defaultValue, description
func (_m *Options) Bool(name string, defaultValue bool, description string) *bool {
	ret := _m.Called(name, defaultValue, description)

	var r0 *bool
	if rf, ok := ret.Get(0).(func(string, bool, string) *bool); ok {
		r0 = rf(name, defaultValue, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// BoolVar provides a mock function with given fields: pointer, name, defaultValue, description
func (_m *Options) BoolVar(pointer *bool, name string, defaultValue bool, description string) {
	_m.Called(pointer, name, defaultValue, description)
}

// Duration provides a mock function with given fields: name, defaultValue, description
func (_m *Options) Duration(name string, defaultValue time.Duration, description string) *time.Duration {
	ret := _m.Called(name, defaultValue, description)

	var r0 *time.Duration
	if rf, ok := ret.Get(0).(func(string, time.Duration, string) *time.Duration); ok {
		r0 = rf(name, defaultValue, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Duration)
		}
	}

	return r0
}

// DurationVar provides a mock function with given fields: pointer, name, defaultValue, description
func (_m *Options) DurationVar(pointer *time.Duration, name string, defaultValue time.Duration, description string) {
	_m.Called(pointer, name, defaultValue, description)
}

// Float provides a mock function with given fields: name, defaultValue, description
func (_m *Options) Float(name string, defaultValue float32, description string) *float32 {
	ret := _m.Called(name, defaultValue, description)

	var r0 *float32
	if rf, ok := ret.Get(0).(func(string, float32, string) *float32); ok {
		r0 = rf(name, defaultValue, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*float32)
		}
	}

	return r0
}

// FloatVar provides a mock function with given fields: pointer, name, defaultValue, description
func (_m *Options) FloatVar(pointer *float32, name string, defaultValue float32, description string) {
	_m.Called(pointer, name, defaultValue, description)
}

// Int provides a mock function with given fields: name, defaultValue, description
func (_m *Options) Int(name string, defaultValue int, description string) *int {
	ret := _m.Called(name, defaultValue, description)

	var r0 *int
	if rf, ok := ret.Get(0).(func(string, int, string) *int); ok {
		r0 = rf(name, defaultValue, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	return r0
}

// IntVar provides a mock function with given fields: pointer, name, defaultValue, description
func (_m *Options) IntVar(pointer *int, name string, defaultValue int, description string) {
	_m.Called(pointer, name, defaultValue, description)
}

// Load provides a mock function with given fields:
func (_m *Options) Load() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields: name, defaultValue, description
func (_m *Options) String(name string, defaultValue string, description string) *string {
	ret := _m.Called(name, defaultValue, description)

	var r0 *string
	if rf, ok := ret.Get(0).(func(string, string, string) *string); ok {
		r0 = rf(name, defaultValue, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// StringVar provides a mock function with given fields: pointer, name, defaultValue, description
func (_m *Options) StringVar(pointer *string, name string, defaultValue string, description string) {
	_m.Called(pointer, name, defaultValue, description)
}

// Time provides a mock function with given fields: name, defaultValue, description
func (_m *Options) Time(name string, defaultValue time.Time, description string) *time.Time {
	ret := _m.Called(name, defaultValue, description)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(string, time.Time, string) *time.Time); ok {
		r0 = rf(name, defaultValue, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// TimeVar provides a mock function with given fields: pointer, name, defaultValue, description
func (_m *Options) TimeVar(pointer *time.Time, name string, defaultValue time.Time, description string) {
	_m.Called(pointer, name, defaultValue, description)
}
